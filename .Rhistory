args(remainder)
submit()
submit
submit()
?deviation
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x+1}, c(8, 4, 0))
evaluate(function(x){c[1]}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){tail(x,n=1)}, c(8, 4, 0))
?paste
past("Programming", "is", "fun!")
paste("Programming", "is", "fun!")
bye()
quit()
library(swirl)
swirl()
submit()
telegram("hello", "remco")
submit()
mad_libs("Zwolle", "home", "programm")
submit()
submit()
'Hello' %p% 'student!'
submit()
submit()
'I' %p% 'love' %r%
'I' %p% 'love' %p% 'R!'
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
t1
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quaters(t2)
quaters(t2)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
info()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
V
skip()
skip()
skip()
skip()
skip()
V
skip()
V
skip()
skip()
skip()
skip()
V
skip()skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
View(flags)
View(flags)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean())
sapply(flag_colors, mean
sapply(flag_colors, mean)
flag_shapes[, 19:23]
flag_shapes <- flags[, 19:23]
lapply(flags, range())
lapply(flag_shapes, range())
lapply(flag_shapes, range(1))
lapply(flag_shapes)
lapply(flag_shapes, range(...))
lapply(flag_shapes, range("1))
?range
lapply(range(flag_shapes))
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flag_shapes, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(swirl)
swirl()
1
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE )
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
select(cran)
cran
select(cran, -time)
select(cran, -5:20)
-5:20
-(5:20)
-select(x:size)
-select(cran, -size)
help()
-(x:size)
-(cran,-size)
-select(cran,-size)
select(cran, size)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 AND r_os == "linux-gnu")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5, NA, 10))
!is.na(c(3,5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, ip_id:store)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country(ascending), r_version(descending), ip_id(ascending))
arrange(cran2, country (ascending), r_version (descending), ip_id (ascending))
arrange(cran2, asc(country), desc(r_version), asc(ip_id))
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(ip_id, package, size)
cran3 <- select(cran,ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
bye()
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran, package)
by_package
?summarize
summarize(by_package,mean(size))
?n
?n_distrinct
?n_distinct
submit()
submit()
submit()
?summarize
?n
submit
submit()
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum$count > 679)
top_counts <- select(filter(pack_sum$count > 679))
?filter
top_counts <- select(pack_sum$count > 679)
top_counts <- select(filter(pack_sum$count > 679))
top_counts <- select(filter(pack_sum, count > 679))
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count)
top_counts_sorted <- arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_un
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
library(swirl)
swirl()
library(tidyr)
students
?gather
-grade
students -grade
gather(students, -grad)
gather(students, -grade)
gather(students, -grade, male, female)
gather(students, male, female, -grade)
gather(students, sex, -grade)
gather(students, sex,count, -grade)
students2
?gather
res <- gather(students2, key = sex_class, value = count)
res <- gather(students2, key = sex_class, value = count, -grade)
res
?seperate
?separate
separate(data = res, col = sex_class, into = c("sex","class"))
submit()
students3
submit()
submit()
submit()
bye()
library(swirl)
swirl()
submit()
submit()
?spread
submit()
submit()
submit()
submit()
library(readr)
parse_number("class5")
?mutate
submit)
submit)
submit()
submit()
submit()
submit()
students4
submit()
?unique
submit()
submit()
submit()
submit()
submit()
submit()
submit()
students4
submit()
?select
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?bind_rows
bind_rows(passed,failed)
sat
submit()
submit()
submit()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hms(now())
update(this_moment, hms(now()))
update(this_moment, hms(now()))
update(this_moment, hours = h(now()), minutes = m(now()), seconds = s(now()))
update(this_moment, hours = 8, minutes = 34, seconds = 55)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
?now
nyc = now(tzone = "America/New_York")
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = "17", minutes = "34")
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- nyc + days(2)
arrive <- depart + hours(15) + minutes(50
arrive <- depart + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(arrive,last_time)
how_long <- interval(last_time,arrive)
as.period(how_long)
stopwatch()
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url, "C:/REMCO/Coursera/CourseR/Course-3/wk4/Question1.csv")
data_q1 <- read.csv("C:/REMCO/Coursera/CourseR/Course-3/wk4/Question1.csv")
?strsplit
strsplit(data_q1, "wgtp")
strsplit(data_q1, "[wgtp]")
strsplit(data_q1, c("wgtp")
strsplit(data_q1, c("wgtp"))
strsplit(data_q1, c("wgtp"))
head(data_q1)
getwd()
?download.file
url_1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
folder <- "C:/REMCO/Coursera/CourseR/Course-3/wk4/"
download.file(url, file.path(folder, "US_communities"))
View(by_package)
## Peer Assignment week 4
setwd("C:/REMCO/Coursera/CourseR/Course-3/wk4/Peer/")
install.packages("data.table")
install.packages("reshape2")
# Load data
activity_labels <- read.table("activity_labels.txt")[,2]
features <- read.table("features.txt")[,2]
extract_features <- grepl("mean|std", features)
# Load test data
x_test <- read.table("test/X_test.txt")
y_test <- read.table("test/y_test.txt")
subject_test <- read.table("test/subject_test.txt")
# change names
names(x_test) = features
X_test = X_test[,extract_features]
y_test[,2] = activity_labels[y_test[,1]]
names(y_test) = c("Activity_ID", "Activity_Label")
names(subject_test) = "subject"
# install package data.table
test_data <- cbind(as.data.table(subject_test), y_test, x_test)
# Load data
activity_labels <- read.table("activity_labels.txt")[,2]
features <- read.table("features.txt")[,2]
extract_features <- grepl("mean|std", features)
# Load test data
x_test <- read.table("test/X_test.txt")
y_test <- read.table("test/y_test.txt")
subject_test <- read.table("test/subject_test.txt")
# change names
names(x_test) = features
x_test = x_test[,extract_features]
y_test[,2] = activity_labels[y_test[,1]]
names(y_test) = c("Activity_ID", "Activity_Label")
names(subject_test) = "subject"
# install package data.table
test_data <- cbind(as.data.table(subject_test), y_test, x_test)
install.packages("data.table")
# Load data
activity_labels <- read.table("activity_labels.txt")[,2]
features <- read.table("features.txt")[,2]
extract_features <- grepl("mean|std", features)
# Load test data
x_test <- read.table("test/X_test.txt")
y_test <- read.table("test/y_test.txt")
subject_test <- read.table("test/subject_test.txt")
# change names
names(x_test) = features
x_test = x_test[,extract_features]
y_test[,2] = activity_labels[y_test[,1]]
names(y_test) = c("Activity_ID", "Activity_Label")
names(subject_test) = "subject"
# install package data.table
test_data <- cbind(as.data.table(subject_test), y_test, x_test)
library("data.table")
# Load data
activity_labels <- read.table("activity_labels.txt")[,2]
features <- read.table("features.txt")[,2]
extract_features <- grepl("mean|std", features)
# Load test data
x_test <- read.table("test/X_test.txt")
y_test <- read.table("test/y_test.txt")
subject_test <- read.table("test/subject_test.txt")
# change names
names(x_test) = features
x_test = x_test[,extract_features]
y_test[,2] = activity_labels[y_test[,1]]
names(y_test) = c("Activity_ID", "Activity_Label")
names(subject_test) = "subject"
# install package data.table
test_data <- cbind(as.data.table(subject_test), y_test, x_test)
library("reshape2")
View(test_data)
?as.data.table
